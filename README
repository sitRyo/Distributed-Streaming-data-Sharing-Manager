Network Streaming data Sharing Manager Readme

******長谷川先生へ

インストール手順
1, フォルダを解凍したら, 新しいフォルダを作成してその中に解凍したNSSMをそのまま入れてください.
(これは, NSSMのインストール中にできるフォルダをまとめるためです)
2, $ ./configure
3, $ make
(aclocal.m4のレシピで失敗しましたとエラーが出た場合 -> autoreconf -i -fを実行してください)

4, sudo bash setup.sh

5, cameraのCMakeLists.txtに

link_directories(${Network_Streaming_data_Sharing_Managerまでの絶対パス}/src/.libs)
include_directories(${Network_Streaming_data_Sharing_Managerまでの絶対パス}/include)

をadd_executableの前に入れてください.

(私の環境では以下のようになりました)

cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

project(camera)

#include_directories( ../../include )

# set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)

# set the build type
set(CMAKE_BUILD_TYPE Release)
# confirmation messages
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")
message(STATUS "CMAKE_C_FLAGS_RELEASE: ${CMAKE_C_FLAGS_RELEASE}")
message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
message(STATUS "CMAKE_CXX_FLAGS_RELEASE: ${CMAKE_CXX_FLAGS_RELEASE}")

find_package(OpenCV REQUIRED)

#D WITH_LIBV4L=ON
#OCV_OPTION(WITH_V4L            "Include Video 4 Linux support"               ON   IF (UNIX AND NOT ANDROID) )
#OCV_OPTION(WITH_LIBV4L         "Use libv4l for Video 4 Linux support"        ON   IF (UNIX AND NOT ANDROID) )

// ここを長谷川先生のPCのパスに書き換えて保存してください．
link_directories(/Users/gunjiryouta/nssm/nssm/src/.libs)
include_directories(/Users/gunjiryouta/nssm/nssm/include)

add_executable(camera-handler ./src/camera-handler.cpp)
target_link_libraries(camera-handler ssm ${OpenCV_LIBRARIES})

add_executable(camera-viewer ./src/camera-viewer.cpp)

6, CMakeLists.txtを保存してmakeしてください.
7, {NSSMまでのパス}/src/ssm-coordinator
8, {cameraまでのパス}/bin/camera-handler

この手順を踏むことで起動ができます．
煩わしくて申し訳ありませんがよろしくお願いします.

******************



* 概要
Network Streaming data Sharing Manager(以降DSSM) は Streaming data Sharing Manager(以降SSM) にネットワークを介した共有メモリへのアクセス機能を追加したものです.
SSMで構成されたシステムのプログラムを殆ど変更せずにネットワーク対応にすることを目標に開発しています.
そのため, 基本的な使い方はSSMと同じですが, ネットワークを使用する関係上, ユーザプログラムに変更が必要な箇所が多々存在します.
それに関してはutilityディレクトリ内のread_proxy_sample.cppとwrite_proxy_sample.cppをご覧ください. 

* ディレクトリ構成
Network_Streaming_data_Sharing_Manager - 
 - Makefile   Make ファイル
 - README_nssm.ja nssmのREADME
 - src        ソースファイル
 - include    インクルードファイル
 - utilities  SSMとDSSMのユーティリティのソースコード

* インストール

 (installしない場合は, 新たなディレクトリを作って, その中にダウンロードしたNSSMをそのまま入れてください)

 $ ./configure
 $ make

(aclocal.m4のレシピで失敗しましたとエラーが出た場合 -> autoreconf -i -fを実行してください)
(DSO missing from command line とエラーが出た場合 -> utility/Makefile.amのAM_CFLAGSに-L/lib64 -lpthreadを追加してください)

(/usr/local/bin以下にインストールしたい場合)
 $ sudo make install

(/usr/local/bin以下にインストールしない場合)
最初に, NSSM管理用のディレクトリを作成します(名前は何でも良いです).
作成したディレクトリにダウンロードしたNSSMを移動します.
($ mv {新規ディレクトリのパス} {ダウンロードしたNSSMのパス} など)

その後Network Streaming data Sharing Manager内のスクリプト(setup.sh)を実行します.
$ bash setup.sh

次に実行するmakeファイルに以下のリンクを加えてください
${Network_Streaming_data_Sharing_Managerまでの絶対パス}/include
${Network_Streaming_data_Sharing_Managerまでの絶対パス}/src/.libs

* cmakeの場合, CMakeLists.txtのadd_executable命令の前に以下の命令を加えてください
link_directories(${Network_Streaming_data_Sharing_Managerまでの絶対パス}/src/.libs)
include_directories(${Network_Streaming_data_Sharing_Managerまでの絶対パス}/include)

上記の命令を記述したらCMakeLists.txtを保存して, もう1度makeを実行してください

注1 ) Autotoolsがない場合
 $ apt-get install automake libtool
で必要なパッケージをインストールしてください

注2 ) コンパイラがc++11に対応していない場合
gcc-5 より以前のバージョンだと, コンパイルが正常にできない現象を確認しています.
その際は, gcc-8をインストールしてコンパイルしてください.

注3 )

setup.shを実行すると, build2というディレクトリが生成され, 以下のようなディレクトリ構成になります

|
|- Network Streaming data Sharing Manager
|- build2

そのため, 新たなディレクトリを作成してその中でNSSM関連のディレクトリをまとめることをおすすめしています.
(つまり以下のようなディレクトリ構造です.)

- projects
  |
  |- Network Streaming data Sharing Manager
  |- build2

なお, このスクリプトはプログラムが参照するSSMのライブラリをNSSM内のライブラリに変更しています.

* プログラム
- SSM
 - ssm-coordinator     Sensor Shairing Manager
 - lsssm               登録されているセンサ情報のリスト表示
 - ssm-logger          ログ取り
 - ssm-advance-player  ログ再生
 - ssm-monitor         書き込み状況表示
 - ssm-graph           ssmの接続状態のdotファイル吐き出し
 - ssm-transporter     ２台のPCでのSSMの同期
 - ssm-date            SSM時刻管理

- DSSM
 - ssm-proxy           coordinatorにネットワークを介して受け取ったデータを渡す
 - ssm-proxy-client    センサハンドラのデータをproxyに送信する

* 起動方法
1, src/ssm-coordinatorを起動
2, utility/ssm-proxyを起動
3, ユーザプログラムを起動

* サンプルプログラム
DSSMのサンプルは utility/read_proxy_sample と utility/write_proxy_sample です.

* トラブルシューティング
1. autotool関連のエラーがでる
 $ autoreconf -i -f
を実行すると治るかもしれません.

--install（-i）
パッケージ化に足りないファイルを自動的に生成。
--force（-f）
既存のファイルを置き換える。デフォルトでは既存のファイルを上書きしない。

2. リンカがエラーを吐く
32bitOSを使用しているときは, utility/Makefile.amのAM_CFLAGSに-L/lib64 -lpthreadを追加してください.

3. メッセージをcoordinatorに送ろうとするとメモリ二重解放エラーが出る
branchを32-64bitに切り替えて, 再度makeして実行してください.
masterブランチは同じbitのOS間での通信にしか対応していません.